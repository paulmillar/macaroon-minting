<?xml version="1.0"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="info" docName="macaroon-mint" submissionType="independent">
  <front>
    <title>Macaroon minting service</title>
    <author initials="AP." surname="Millar" fullname="Paul Millar">
      <organization abbrev="DESY">Deutsches Elektronen-Synchrotron</organization>
      <address>
        <postal>
          <street>Notkestrasse 85</street>
          <city>Hamburg</city>
          <code>22607</code>
          <country>Germany</country>
        </postal>
        <email>paul.millar@desy.de</email>
      </address>
    </author>

    <author initials="B." surname="Wegh" fullname="Bas Wegh">
      <organization abbrev="KIT">Karlsruher Institut fuer Technologie</organization>
      <address>
        <postal>
          <street>Kaiserstrasse 12</street>
          <city>Karlsruhe</city>
          <code>76131</code>
          <country>Germany</country>
        </postal>
        <email>bas.wegh@kit.edu</email>
      </address>
    </author>


    <date day="17" month="February" year="2016"/>

    <keyword>macaroons</keyword>
    <keyword>bearer-token</keyword>

    <abstract>
      <t>Macaroons are bearer tokens that may including zero or more
      caveats that attenuate rights (limit what can be done), enforce
      some context (limit where and when they may be used), and
      include other parties (delegate checking to third parties).  Any
      agent that holds the macaroon can add additional caveats.</t>

      <t>This document describes a simple API that allows a client to
      request that a macaroon is minted with zero or more caveats.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>In 2014, a group of six security researchers introduced the
      concept of macaroons with their paper "Macaroons: Cookies with
      Contextual Caveats for Decentralized Authorization in the
      Cloud".  In essence, a macaroon is a bearer token with the
      following properties: its usage may be restricted in any fashion
      that can be written as a text string, a macaroon may have
      multiple such restrictions.  An agent possessing the macaroon
      can further restrict its usage but cannot remove any existing
      restrictions, caveats may require the client to provide proof
      from some third-party.  Further details are available in their
      paper <xref target="macaroons"/>.</t>

      <t>This document describes how an authenticated client may
      request a macaroon.  Amongst other possible uses, the client
      could use this macaroon to authorise activity as part of a login
      session, or it may choose to delegated it to some third-party
      agent that will act on behalf of the client.</t>

      <t>The client may supply a list of first-party caveats to the
      server when requesting a macaroon is minted.  This is optional,
      as the macaroon design allows the client to add such caveats
      after it receives the token.  Supplying first-party caveats to
      the server provides three main benefits:
      <list style="symbols">
	<t>By the server adding the first-party caveats, the macaroon
	is already limited when delivered to the client.  This
	provides some limitations if the token were to be stolen.</t>

	<t>It offers the client the opportunity to discover caveats
	that are either malformed or are not acceptable to the server.
	Rather than simply rejecting requests that are authorised by a
	macaroon with such caveats, the server can provide more
	detailed information when declining to mint such a
	macaroon.</t>

	<t>It allows negotiation between client and server: if the
	client supplies caveats that satify some part of the server
	policy then the server can refrain from adding those caveats
	itself.  For example, if the server policy requires tokens be
	bound to some IP address and the client requests a macaroon
	with a caveat binding to the IP address of third-party service
	then the client can then delegate the minted macaroon to that
	third-party.</t>
      </list>
      </t>

      <t>When requesting that the server mint a macaroon, the client
      must first discover the macaroon minting endpoint.  The macaroon
      configuration endpoint provides a standard service where related
      information may be discovered.  Once the macaroon minted
      endpoint is known, the client may request a macaroon and the
      server will respond with the result of processing that
      request.</t>

      <t>It could be that the client must authenticate so that the
      macaroon minting request may be authorised.  The server may also
      use such authentication to bind the macaroon to the client's
      identity.  How any such authentication happens is outside the
      scope of this document.</t>
    </section>

    <section title="Macaroon configuration endpoint">
      <t>The first time a client wishes a server to mint an macaroon,
      it must discover information about the macaroon minting service;
      in particular, the macaroon minting endpoint.  Macaroon related
      information, such as the minting endpoint, is available from the
      macaroon configuration endpoint.  This endpoint MUST be
      available from all hosts that have endpoints that accept
      macaroons minted using this process.</t>

      <t>The client requests information by issuing a GET request to
      the <spanx style="verb">/.well-known/macaroon-config</spanx>
      path.  The request MAY include the <spanx
      style="verb">Accept</spanx> request header; if present, this
      header's value MUST indicate that the <spanx
      style="verb">application/json</spanx> MIME type is
      acceptable.</t>

      <t>The response entity is a JSON object.  The following names
      are defined:
      <list style="hanging">
	<t hangText="mint-endpoint">A JSON String containing the URL
	of the minting endpoint.  If this is a relative URL then it is
	resolved using the macaroon configuration endpoint as the base
	URL, according to RFC 3986.</t>
      </list>
      The server MAY include additional information in the macaroon
      config JSON Object.</t>

      <t>The client SHOULD cache the information returned by the
      macaroons configuration endpoint.  If the client receives a
      response with a status code >= 300 when using cached information
      then it SHOULD invalid all cached information obtained from this
      macaroon configuration JSON object.</t>
    </section>

    <section title="Requesting a macaroon">
      <t>The client requests that the server creates a macaroon by
      issuing an HTTP POST request to the macaroon minting endpoint.
      The request MUST have a <spanx style="verb">Content-Type</spanx>
      header with value <spanx style="verb">application/json</spanx>.
      The request entity must be a valid JSON object.</t>

      <t>The client MAY specify arguments that describe aspects of the
      desired macaroon in the form of one or more name/value pairs in
      the JSON object.  The letters in a name MUST be either only
      upper-case letters or only lower-case letters.  The server MUST
      process any request with a lower-case name that it does not
      understand as if the request did not contain that name/value
      pair.  The server MUST reject any request that contains an
      upper-case name that it does not understand.</t>

      <t>The following names are defined:
      <list style="hanging">
        <t hangText="state">A JSON String that is copied verbatim into
        any response JSON object.  A client SHOULD NOT send requests
        with state values longer than 100 characters. This item is
        optional.</t>

        <t hangText="caveats">A JSON List of String values, where each
        String is a caveat requested by the client.  The client MUST
        NOT specify an empty list.  The server MUST either return a
        macaroon that includes all requested caveats or reject the
        request.  This item is optional.</t>
      </list>
      </t>

      <t>The request does not support the client requesting that
      third-party caveats be included in the macaroon.  This is
      because a third-party caveat requires a prior relationship
      between the agent that wants to include the third-party caveat
      (the client) and the third-party service that will issue the
      discharge maracroon.  This prior relationship is a shared
      secret: a key.  For the server to include such a third-party
      macaroon, it must be given this secret key.  Therefore, clients
      are expected to append any third-party caveats to the minted
      macaroon.  This restriction does not affect the server; it can
      include third-party caveats in the minted macaroon.</t>
    </section>

    <section title="Server response">
      <t>In general, the server MUST respond to the HTTP POST requests
      with an HTTP response that has <spanx
      style="verb">Content-Type</spanx> header of <spanx
      style="verb">application/json</spanx>.  The entity in the
      response is a valid JSON Object.</t>

      <t>The response is a JSON Object with all names in lowercase.
      The response MAY include the following names:
      <list style="hanging">
        <t hangText="state">The value is the JSON String the client
        supplied as the <spanx style="verb">state</spanx> value in the
        request.</t>

        <t hangText="reason">The value is a JSON Object that provides
        human-readable description of the result.  The entries in this
        Object are messages in different languages.  The name is an
        RFC 5646 language tag and the value is a JSON String of the
        message in that particular language.  If the server includes a
        reason object then it SHOULD include one entry using the
        <spanx style="verb">en</spanx> language tag.</t>

        <t hangText="invalid-caveats">The value is a non-empty JSON
        List of String values.  Each String value is a requested
        caveat that the server cannot enforce.</t>

        <t hangText="macaroon">The value is a String value containing
        the minted macaroon.</t>
      </list>
      </t>

      <t>A minting service that requires clients to authenticate MUST
      reject requests from unauthenticated users with 401
      Unauthenticated.  The server MAY respond with 401 if the client
      has authenticated so that server policy rejects creating a
      macaroon but alternative authentication mechanisms exist with
      which the client could authenticate and the macaroon request
      would be accepted.</t>

      <t>The server SHOULD reject request with 403 Forbidden if the
      request comes from an authenticated client where the server
      policy rejects creating a macaroon for that user.</t>

      <t>The server MUST return 400 Bad Request if the client request
      contains the wrong <spanx style="verb">Content-Type</spanx>
      header value, the request entity is not a valid JSON Object or
      the <spanx style="verb">Accept</spanx> request header value
      indicates that the client cannot accept an <spanx
      style="verb">application/json</spanx> response entity. The
      response MAY contain a JSON Object with a informative
      reason.</t>

      <t>The server MUST reject any request that contains a caveat it
      does not understand or is badly formatted, failing the request
      with the 400 Bad Request status code.  The server SHOULD include
      the rejected caveats in the response JSON Object's
      invalid-caveats list.</t>

      <t>If the request is successful then the server responds with a
      200 OK status code.  The response MUST contain the <spanx
      style="verb">Content-Type</spanx> header with value <spanx
      style="verb">application/json</spanx>.  The response JSON object
      MUST have a <spanx style="verb">macaroon</spanx> name/value pair
      containing the minted macaroon.</t>

      <t>The returned macaroon MAY contain caveats not requested by
      the user.  Such caveats may represent security policies that the
      server enforces, or may encapsulate the client's identity.</t>
    </section>

    <section title="Caveat language">
      <t>Caveats are limitations on how the macaroon may be used; any
      limitation that is expressible as a String may be included in a
      macaroon.  There is no standard on how to encode these
      limitations as caveats.  Any such caveat language is necessarily
      couched in terms related to the purpose for which the macaroon
      was minted.</t>

      <t>To keep this document generic, any aspect related to the
      caveat language is considered out-of-scope.  The only
      requirement is that it is expressible as a JSON String.  It is
      unspecified how the client knows which String to include when
      expressing that desired limitations be enforced.</t>

      <t>The server may choose to reject a macaroon request.  It may
      do so because it does not understand the caveat, or because
      server policy disallows this limitation.  Therefore, it may be
      useful for a client to discover server policy so it can adjust
      the requested caveats to match the server's requirements.</t>

      <t>Any useful description of server policy on caveats will
      likely involves the caveat language itself, and is therefore
      out-of-scope for this document.  Future documents may describe
      how a client can discover server policy by extending the
      information returned by the macaroons configuration
      endpoint.</t>
    </section>

    <section title="Comparison with OAuth 2.0">
      <t>The observant reader will note there is some overlap between
      this protocol and OAuth 2.0 <xref target="oauth2"/>.  It is
      worth noting how these two protocols differ.</t>

      <t>The focus of the OAuth 2.0 authorization framework is on
      delegating authority.  It allows a client (typically some web
      service) to acquire limited access to some HTTP protected
      resource.  Although the protocol focuses on bearer tokens (see
      <xref target="oauth2-tokens"/>) the exact characteristics of the
      token is left largely unspecified.</t>

      <t>By comparison, this protocol focuses on requesting a
      particular bearer token: a macaroon.  It includes
      macaroon-specific features that are not included in OAuth
      2.0.</t>
    </section>

    <section title="Security considerations">
      <t>Macaroons are bearer tokens.  This means that any agent that
      possesses the token can, in principle, use it.  Adding
      contextual caveats (such as limiting allowed client IP
      addresses) is a mechanism to reduce this risk.  Therefore,
      server policy may require certain contextual caveats exist in
      any minted macaroon.</t>

      <t>If the server policy requires certain contextual caveats then
      the client may request a macaroon with caveats that satisfy that
      requirement.  For example, the server policy may require that
      any minted macaroon is bound to some IP address, which the
      client can satisfy by including such a caveat in the request.
      If the client request fails to satisfy the server policy then
      the server MAY reject the request or it MAY include an
      additional caveat to satisfy the policy.  If the server rejects
      the request then it SHOULD include a JSON Object in the response
      that uses <spanx style="verb">reason</spanx> to describe the
      problem.</t>

      <t>A caveat that the client requests may conflict with the
      server policy; for example, the client could request an IP
      address outside some allowed set of IP addresses.  If such a
      conflict occurs then the server SHOULD fail the request and
      include the caveat in the invalid-caveat list in the response
      JSON Object.</t>

      <t>If a client is authorised to use the macaroon minting
      endpoint by some existing macaroon then the server MUST ensure
      that all caveats from the existing macaroon are included in the
      issued macaroon.  Failure to do this risks unintended rights
      amplication as the client requests a fresh macaroon with fewer
      or more relaxed caveats.</t>
    </section>
  </middle>

  <back>
    <references>
      <reference anchor="oauth2">
	<front>
	  <title>The OAuth 2.0 Authorization Framework</title>
	  <author fullname="Dick" initials="D." surname="Hardt" role="editor"/>
	  <date month="October" year="2012"/>
	</front>
	<seriesInfo name="RFC" value="6749"/>
      </reference>

      <reference anchor="oauth2-tokens">
	<front>
	  <title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
	  <author fullname="Michael" initials="M." surname="Jones"/>
	  <author fullname="Dick" initials="D." surname="Hardt"/>
	  <date month="October" year="2012"/>
	</front>
	<seriesInfo name="RFC" value="6749"/>
      </reference>

      <reference anchor="macaroons" target="http://research.google.com/pubs/pub41892.html">
	<front>
	  <title>Macaroons: Cookies with Contextual Caveats for Decentralized Authorization in the Cloud</title>
	  <author fullname="Arnar Birgisson" initials="A." surname="Birgisson"/>
	  <author fullname="Joe Gibbs Politz" initials="JG." surname="Politz"/>
	  <author fullname="Ulfar Erlingsson" initials="U." surname="Erlingsson"/>
	  <author fullname="Ankur Taly" initials="A." surname="Taly"/>
	  <author fullname="Michael Vrable" initials="M." surname="Vrable"/>
	  <author fullname="Mark Lentczner" initials="M." surname="Lentczner"/>
	  <date year="2014"/>
	</front>
	<format target="http://research.google.com/pubs/archive/41892.pdf" type="PDF"/>
      </reference>
    </references>
  </back>
</rfc>
